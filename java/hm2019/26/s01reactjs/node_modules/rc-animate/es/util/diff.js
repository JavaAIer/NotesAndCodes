import _extends from 'babel-runtime/helpers/extends';
export var STATUS_ADD = 'add';
export var STATUS_KEEP = 'keep';
export var STATUS_REMOVE = 'remove';
export var STATUS_REMOVED = 'removed';

export function wrapKeyToObject(key) {
  if (key && typeof key === 'object' && 'key' in key) {
    return key;
  }
  return { key: key };
}

export function parseKeys() {
  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  return keys.map(wrapKeyToObject);
}

export function diffKeys() {
  var prevKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var currentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var list = [];
  var currentIndex = 0;
  var currentLen = currentKeys.length;

  var prevKeyObjects = parseKeys(prevKeys);
  var currentKeyObjects = parseKeys(currentKeys);

  // Check prev keys to insert or keep
  prevKeyObjects.forEach(function (keyObj) {
    var hit = false;

    for (var i = currentIndex; i < currentLen; i += 1) {
      var currentKeyObj = currentKeyObjects[i];
      if (currentKeyObj.key === keyObj.key) {
        // New added keys should add before current key
        if (currentIndex < i) {
          list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function (obj) {
            return _extends({}, obj, { status: STATUS_ADD });
          }));
          currentIndex = i;
        }
        list.push(_extends({}, currentKeyObj, {
          status: STATUS_KEEP
        }));
        currentIndex += 1;

        hit = true;
        break;
      }
    }

    // If not hit, it means key is removed
    if (!hit) {
      list.push(_extends({}, keyObj, {
        status: STATUS_REMOVE
      }));
    }
  });

  // Add rest to the list
  if (currentIndex < currentLen) {
    list = list.concat(currentKeyObjects.slice(currentIndex).map(function (obj) {
      return _extends({}, obj, { status: STATUS_ADD });
    }));
  }

  return list;
}