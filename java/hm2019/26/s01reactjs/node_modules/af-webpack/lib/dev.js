"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dev;

var _fs = _interopRequireDefault(require("fs"));

var _openBrowser = _interopRequireDefault(require("react-dev-utils/openBrowser"));

var _webpack = _interopRequireDefault(require("webpack"));

var _assert = _interopRequireDefault(require("assert"));

var _webpackDevServer = _interopRequireDefault(require("webpack-dev-server"));

var _chalk = _interopRequireDefault(require("chalk"));

var _prepareUrls = _interopRequireDefault(require("./prepareUrls"));

var _clearConsole = _interopRequireDefault(require("./clearConsole"));

var _errorOverlayMiddleware = _interopRequireDefault(require("./errorOverlayMiddleware"));

var _send = _interopRequireWildcard(require("./send"));

var _choosePort = _interopRequireDefault(require("./choosePort"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const isInteractive = process.stdout.isTTY;
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 8000;
const HOST = process.env.HOST || '0.0.0.0';
const PROTOCOL = process.env.HTTPS ? 'https' : 'http';
const CERT = process.env.HTTPS && process.env.CERT ? _fs.default.readFileSync(process.env.CERT) : '';
const KEY = process.env.HTTPS && process.env.KEY ? _fs.default.readFileSync(process.env.KEY) : '';

const noop = () => {};

process.env.NODE_ENV = 'development';

function dev({
  webpackConfig,
  _beforeServerWithApp,
  beforeMiddlewares,
  afterMiddlewares,
  beforeServer,
  afterServer,
  contentBase,
  onCompileDone = noop,
  proxy,
  port,
  base,
  serverConfig: serverConfigFromOpts = {}
}) {
  (0, _assert.default)(webpackConfig, 'webpackConfig must be supplied');
  (0, _choosePort.default)(port || DEFAULT_PORT).then(port => {
    if (port === null) {
      return;
    }

    const compiler = (0, _webpack.default)(webpackConfig);
    let isFirstCompile = true;
    const IS_CI = !!process.env.CI;
    const SILENT = !!process.env.SILENT;
    const urls = (0, _prepareUrls.default)(PROTOCOL, HOST, port, base);
    compiler.hooks.done.tap('af-webpack dev', stats => {
      if (stats.hasErrors()) {
        // make sound
        // ref: https://github.com/JannesMeyer/system-bell-webpack-plugin/blob/bb35caf/SystemBellPlugin.js#L14
        if (process.env.SYSTEM_BELL !== 'none') {
          process.stdout.write('\x07');
        }

        return;
      }

      let copied = '';

      if (isFirstCompile && !IS_CI && !SILENT) {
        try {
          require('clipboardy').writeSync(urls.localUrlForBrowser);

          copied = _chalk.default.dim('(copied to clipboard)');
        } catch (e) {
          copied = _chalk.default.red(`(copy to clipboard failed)`);
        }

        console.log();
        console.log([`  App running at:`, `  - Local:   ${_chalk.default.cyan(urls.localUrlForTerminal)} ${copied}`, `  - Network: ${_chalk.default.cyan(urls.lanUrlForTerminal)}`].join('\n'));
        console.log();
      }

      onCompileDone({
        isFirstCompile,
        stats
      });

      if (isFirstCompile) {
        isFirstCompile = false;
        (0, _openBrowser.default)(urls.localUrlForBrowser);
        (0, _send.default)({
          type: _send.DONE
        });
      }
    });

    const serverConfig = _objectSpread({
      disableHostCheck: true,
      compress: true,
      clientLogLevel: 'none',
      hot: true,
      quiet: true,
      headers: {
        'access-control-allow-origin': '*'
      },
      publicPath: webpackConfig.output.publicPath,
      watchOptions: {
        ignored: /node_modules/
      },
      historyApiFallback: false,
      overlay: false,
      host: HOST,
      proxy,
      https: !!process.env.HTTPS,
      cert: CERT,
      key: KEY,
      contentBase: contentBase || process.env.CONTENT_BASE,

      before(app) {
        (beforeMiddlewares || []).forEach(middleware => {
          app.use(middleware);
        }); // internal usage for proxy

        if (_beforeServerWithApp) {
          _beforeServerWithApp(app);
        }

        app.use((0, _errorOverlayMiddleware.default)());
      },

      after(app) {
        (afterMiddlewares || []).forEach(middleware => {
          app.use(middleware);
        });
      }

    }, serverConfigFromOpts, webpackConfig.devServer || {});

    const server = new _webpackDevServer.default(compiler, serverConfig);
    ['SIGINT', 'SIGTERM'].forEach(signal => {
      process.on(signal, () => {
        server.close(() => {
          process.exit(0);
        });
      });
    });

    if (beforeServer) {
      beforeServer(server);
    }

    server.listen(port, HOST, err => {
      if (err) {
        console.log(err);
        return;
      }

      if (isInteractive) {
        (0, _clearConsole.default)();
      }

      console.log(_chalk.default.cyan('Starting the development server...\n'));
      (0, _send.default)({
        type: _send.STARTING
      });

      if (afterServer) {
        afterServer(server);
      }
    });
  }).catch(err => {
    console.log(err);
  });
}